// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

enum InstallationType {
  user
  organisation
}

model Installation {
  id       String           @id @default(cuid())
  githubId Int              @unique
  type     InstallationType

  memberships  Membership[]
  repositories Repository[]

  @@map(name: "installations")
}

model Repository {
  id             String   @id @default(cuid())
  githubId       Int      @unique
  name           String
  description    String?
  homepage       String?
  topics         String[]
  default_branch String
  installationId String

  levels            Json               @default("[]")
  pointTransactions PointTransaction[]
  installation      Installation       @relation(fields: [installationId], references: [id])

  @@map(name: "repositories")
}

enum MembershipRole {
  owner
  member
}

model Membership {
  installation   Installation   @relation(fields: [installationId], references: [id], onDelete: Cascade)
  installationId String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           MembershipRole

  @@id([userId, installationId])
  @@index([userId])
  @@index([installationId])
  @@map(name: "memberships")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  githubId      Int?      @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  address       String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts          Account[]
  sessions          Session[]
  pointTransactions PointTransaction[]
  memberships       Membership[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model PointTransaction {
  id           String   @id @default(cuid())
  points       Int
  description  String
  url          String?
  userId       String
  repositoryId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  repository Repository @relation(fields: [repositoryId], references: [id])

  @@map(name: "point_transactions")
}
